syntax = "proto3";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "solidity.proto";
import "libp2p.proto";
package api;

service P2pim {
  rpc GetInfo (GetInfoRequest) returns (GetInfoResponse);
  rpc GetBalance (GetBalanceRequest) returns (GetBalanceResponse);
  rpc Approve (ApproveRequest) returns (ApproveResponse);
  rpc Deposit (DepositRequest) returns (DepositResponse);
  rpc Store (StoreRequest) returns (StoreResponse);
  rpc ListStorageRented (ListStorageRentedRequest) returns (ListStorageRentedResponse);
  // rpc ListStorageLet (ListSotorageLetRequest) returns (ListStorageLetResponse);
}

service Swarm {
  rpc GetConnectedPeers (GetConnectedPeersRequest) returns (GetConnectedPeersResponse);
}

message ListStorageRentedRequest {

}

message ListStorageRentedResponse {
  message StorageRentedData {
    libp2p.PeerId peer_id = 1;
    uint64 nonce = 2;
    // TODO this is the same than in p2p.proto LeaseTerms
    solidity.Address token_address = 3;
    solidity.Uint256 price = 4;
    solidity.Uint256 penalty = 5;
    google.protobuf.Timestamp proposal_expiration = 6;
    google.protobuf.Duration lease_duration = 7;
    solidity.H256 transaction_hash = 8;
    google.protobuf.Timestamp lease_started = 9;
  }
  repeated StorageRentedData storage_rented_data = 1;
}

message StoreRequest {
  libp2p.PeerId peer_id = 1;
  solidity.Address token_address = 2;
  solidity.Uint256 price = 3;
  solidity.Uint256 penalty = 4;
  google.protobuf.Duration lease_duration = 5;
  bytes data = 1000;
}

message StoreResponse {
  solidity.H256 transaction_hash = 1;
}

message GetConnectedPeersRequest {
}

message GetConnectedPeersResponse {
  repeated libp2p.PeerId peer_list = 1;
}

message GetInfoRequest {
}

message GetInfoResponse {
  solidity.Address address_wallet = 1;
  solidity.Address address_storage = 2;
  repeated BalanceEntry balance = 3;
}

message BalanceEntry {
  TokenInfo token = 1;
  solidity.Uint256 available_account = 2;
  solidity.Uint256 allowed_account = 3;
  solidity.Uint256 available_p2pim = 4;
  solidity.Uint256 locked_rents = 5;
  solidity.Uint256 locked_lets = 6;
}

message TokenInfo {
  solidity.Address token_address = 1;
  string name = 2;
  string symbol = 3;
  uint32 decimals = 4;
}

message GetBalanceRequest {
  solidity.Address token_address = 1;
}

message GetBalanceResponse {
  BalanceEntry balance = 1;
}

message ApproveRequest {
  solidity.Address token_address = 1;
  solidity.Uint256 amount = 2;
}

message ApproveResponse {
  solidity.H256 transaction_hash = 1;
}

message DepositRequest {
  solidity.Address token_address = 1;
  solidity.Uint256 amount = 2;
}

message DepositResponse {
  solidity.H256 transaction_hash = 1;
}
